{"version":3,"sources":["Utils/store/atoms.js","styles/index.js","Components/SearchBar.js","Components/MovieTab.js","Components/Results.js","Components/Nominations.js","Components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["nominatedState","atom","key","default","searchTermState","searchResultState","AppContainer","styled","section","Card","div","Tab","li","Form","form","SearchBar","useRecoilState","searchTerm","setSearchTerm","setSearchResults","useSetRecoilState","useEffect","axios","get","process","then","res","data","Search","catch","err","console","log","type","value","placeholder","onChange","e","target","MovieTab","props","Title","Year","imdbID","action","nominated","setNominated","useState","isNominated","setIsNominated","some","movie","disabled","onClick","length","concat","newList","filter","handleClick","Results","searchResults","useRecoilValue","map","Nominations","Banner","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.73a106eb.chunk.js","sourcesContent":["import { atom } from 'recoil'\r\n\r\nexport const nominatedState = atom({\r\n  key: 'nominatedState',\r\n  default: []\r\n})\r\n\r\nexport const searchTermState = atom({\r\n  key: 'searchTermState',\r\n  default: ''\r\n})\r\n\r\nexport const searchResultState = atom({\r\n  key: 'searchResultState',\r\n  default: []\r\n})","import styled from 'styled-components'\r\n\r\nexport const AppContainer = styled.section`\r\n  display:flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  margin: auto;\r\n  width: 75%;\r\n\r\n  div{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: stretch;\r\n  }\r\n`\r\n\r\nexport const Card = styled.div`\r\n  width: 300px;\r\n  flex-direction: column;\r\n  border: solid 1px grey;\r\n  align-self: flex-start;\r\n\r\n`\r\n\r\nexport const Tab = styled.li`\r\n  text-align: top;\r\n\r\n`\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n\r\n  background: green;\r\n  input {\r\n\r\n  }\r\n`","import React, { useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { useRecoilState, useSetRecoilState } from 'recoil'\r\nimport { searchTermState, searchResultState } from '../Utils/store'\r\n\r\nimport { Form } from '../styles/'\r\n\r\n\r\nexport const SearchBar = () => {\r\n  const [searchTerm, setSearchTerm] = useRecoilState(searchTermState)\r\n  const setSearchResults = useSetRecoilState(searchResultState)\r\n\r\n\r\n  //useeffect will fetch data at every key stroke after third char\r\n  useEffect(() => {\r\n    axios.get(`http://www.omdbapi.com/?s=${searchTerm}&apikey=${process.env.REACT_APP_OMDB_API}`)\r\n    .then(res => { setSearchResults(res.data.Search) })\r\n    .catch(err => { console.log(err) })\r\n  },[searchTerm])\r\n\r\n\r\n\r\n  return (\r\n    <Form>\r\n      <label> Movie Title </label>\r\n      <input\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        placeholder=\"Movie Title\"\r\n        onChange={e => setSearchTerm(e.target.value)}\r\n      />\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useRecoilState } from 'recoil'\r\n\r\nimport { nominatedState } from '../Utils/store'\r\nimport { Tab } from '../styles/'\r\n\r\nconst MovieTab = ({props}) => {\r\n  const { Title, Year, imdbID, /* Type, Poster,*/ action } = props\r\n  const [nominated, setNominated] = useRecoilState(nominatedState)\r\n  const [isNominated, setIsNominated] = useState(false)\r\n\r\n\r\n\r\n  const handleClick = () => {\r\n    //adds Movie to 'Nominated'\r\n    if (action === 'Nominate' //only deals with MovieTabs in 'Results'\r\n    && nominated.length < 5 //denies entries after 5th tab\r\n    && !nominated.some(movie => movie.imdbID === imdbID)) { //denies addition if movie already nominated\r\n      setNominated(nominated.concat(props))\r\n      setIsNominated(true)\r\n    }\r\n\r\n    // removes MovieTabs from 'Nominations'\r\n    if (action === 'Remove') {\r\n      setIsNominated(false)\r\n      const newList = nominated.filter((movie) => imdbID !== movie.imdbID)\r\n      setNominated(newList)\r\n    }\r\n  }\r\n\r\n  //updates MovieTabs in 'Results\" to make them reclickabel whe removed from nominated list\r\n  useEffect(() => {\r\n    if (!nominated.some(movie => movie.imdbID === imdbID))\r\n    setIsNominated(false)\r\n  }, [nominated])\r\n\r\n\r\n  return (\r\n    <Tab>\r\n      <h5>{Title}</h5>\r\n      <span>{Year}</span>\r\n      <button\r\n      disabled={isNominated && (action ==='Nominate')}\r\n      onClick={()=> handleClick()}\r\n      >{action}</button>\r\n    </Tab>\r\n  )\r\n}\r\n\r\nexport default MovieTab\r\n","import React from 'react'\r\nimport { useRecoilValue } from 'recoil'\r\n\r\nimport { searchResultState, searchTermState } from '../Utils/store'\r\nimport MovieTab from './MovieTab'\r\nimport { Card } from '../styles'\r\n\r\n\r\nconst Results = () => {\r\n  const searchResults = useRecoilValue(searchResultState)\r\n  const searchTerm = useRecoilValue(searchTermState)\r\n\r\n  return (\r\n    <Card>\r\n      <h3> Results for \"{searchTerm}\" </h3>\r\n      {/* initial key stroke will change search results to 'undefined', so AND logic avoids 'cannot map over undefined' error */}\r\n      <ul> { searchResults && searchResults.map(movie => {\r\n        return <MovieTab props={{...movie, action:'Nominate'}} key={movie.imdbID}  />\r\n      } ) } </ul>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nimport { useRecoilValue } from 'recoil'\r\n\r\nimport { nominatedState } from '../Utils/store'\r\nimport MovieTab from './MovieTab'\r\nimport { Card } from '../styles'\r\n\r\n\r\n\r\nconst Nominations = () => {\r\n  const nominated = useRecoilValue(nominatedState)\r\n\r\n  return (\r\n    <Card>\r\n      <h3> Nominated </h3>\r\n      <ul> { nominated.map(movie => { //poulates list with nominated movies\r\n        return <MovieTab props={{...movie, action:'Remove'}} key={movie.imdbID} />\r\n      } ) } </ul>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Nominations\r\n","import React from 'react'\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import React from 'react';\nimport { useRecoilValue } from 'recoil'\n\nimport SearchBar from './Components/SearchBar'\nimport Results from './Components/Results'\nimport Nominations from './Components/Nominations'\nimport Banner from './Components/Banner'\nimport { nominatedState } from './Utils/store'\n\nimport { AppContainer } from './styles/index'\n\nconst App = () => {\n  const nominated = useRecoilValue(nominatedState)\n\n  return (\n    <AppContainer>\n      <h1> The Shoppies </h1>\n      <SearchBar />\n      {nominated.length === 5  && <Banner/>}\n      <div>\n        <Results />\n        <Nominations />\n      </div>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <RecoilRoot>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </RecoilRoot>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}